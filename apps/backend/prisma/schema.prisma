// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stories Story[]

  @@map("users")
}

model Story {
  id          String   @id @default(cuid())
  title       String
  uniqueId    String   @unique // Combination of title + random hash
  publisherName String
  publisherPic String? // URL to uploaded image
  largeThumbnail String? // URL to uploaded image
  smallThumbnail String? // URL to uploaded image
  ctaType     String? // 'redirect' | 'form' | 'promo' | 'sell'
  ctaValue    String?
  ctaText     String? // Custom CTA button text
  status      String   @default("draft") // 'draft' | 'published' | 'archived'
  format      String   @default("portrait") // 'portrait' | 'landscape'
  deviceFrame String   @default("mobile") // 'mobile' | 'video-player'
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  frames  StoryFrame[]

  @@map("stories")
}

model StoryFrame {
  id        String   @id @default(cuid())
  order     Int      // Frame order within the story
  type      String   @default("story") // 'story' | 'ad'
  hasContent Boolean @default(false)
  name      String?  // Custom frame name
  link      String?  // Optional link URL for the frame
  linkText  String?  // Custom link text (defaults to "Link")
  storyId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ad configuration stored as JSON
  adConfig  Json?

  // Relations
  story      Story           @relation(fields: [storyId], references: [id], onDelete: Cascade)
  elements   StoryElement[]
  background StoryBackground?

  @@map("story_frames")
}

model StoryElement {
  id       String @id @default(cuid())
  type     String // 'text' | 'image' | 'shape'
  x        Float
  y        Float
  width    Float
  height   Float
  content  String? // For text elements
  mediaUrl String? // For image elements
  frameId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Style properties stored as JSON
  style Json?

  // Relations
  frame StoryFrame @relation(fields: [frameId], references: [id], onDelete: Cascade)

  @@map("story_elements")
}

model StoryBackground {
  id       String @id @default(cuid())
  type     String // 'color' | 'image' | 'video'
  value    String
  opacity  Float?
  rotation Float?
  zoom     Float?
  filter   String?
  offsetX  Float?
  offsetY  Float?
  frameId  String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  frame StoryFrame @relation(fields: [frameId], references: [id], onDelete: Cascade)

  @@map("story_backgrounds")
} 