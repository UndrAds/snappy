services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: snappy-postgres
    environment:
      POSTGRES_DB: snappy_db
      POSTGRES_USER: snappy_user
      POSTGRES_PASSWORD: snappy_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - snappy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snappy_user -d snappy_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: snappy-redis
    ports:
      - "6379:6379"
    networks:
      - snappy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: snappy-backend
    env_file:
      - ./apps/backend/.env
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://snappy_user:snappy_password@postgres:5432/snappy_db
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: "https://player.tektag.ai"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - snappy-network
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    container_name: snappy-frontend
    env_file:
      - ./apps/frontend/.env
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - snappy-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: snappy-nginx
    ports:
      - "80:80"
    volumes:
      - ./uploads:/opt/snappy/uploads:ro
      - ./apps/frontend/public:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
    networks:
      - snappy-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  snappy-network:
    driver: bridge
